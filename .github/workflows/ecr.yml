name: Build & Push to ECR

on:
  push:
    branches: [ master ]        # change to [ main ] if your default branch is main
  workflow_dispatch:            # allow manual runs

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      AWS_REGION: us-east-1
      WEB_REPO: clo835-webapp
      MYSQL_REPO: clo835-mysql
      IMAGE_TAG: v0.2                  # bump tag to avoid caching old deps
      SHA_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Confirm identity
        run: aws sts get-caller-identity

      # ðŸ”’ Removed any repo-creation calls (no ecr:CreateRepository)
      # Optional: a harmless existence check (won't fail build)
      - name: Check ECR repos exist (optional)
        run: |
          aws ecr describe-repositories --repository-names "$WEB_REPO"   || echo "$WEB_REPO not found (ok)"
          aws ecr describe-repositories --repository-names "$MYSQL_REPO" || echo "$MYSQL_REPO not found (ok)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push web image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -e
          docker build --pull --no-cache \
            -t "${REGISTRY}/${WEB_REPO}:${IMAGE_TAG}" \
            -t "${REGISTRY}/${WEB_REPO}:${SHA_TAG::7}" \
            -f Dockerfile .
          docker push "${REGISTRY}/${WEB_REPO}:${IMAGE_TAG}"
          docker push "${REGISTRY}/${WEB_REPO}:${SHA_TAG::7}"

      - name: Build & push mysql image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -e
          docker build --pull --no-cache \
            -t "${REGISTRY}/${MYSQL_REPO}:${IMAGE_TAG}" \
            -t "${REGISTRY}/${MYSQL_REPO}:${SHA_TAG::7}" \
            -f Dockerfile_mysql .
          docker push "${REGISTRY}/${MYSQL_REPO}:${IMAGE_TAG}"
          docker push "${REGISTRY}/${MYSQL_REPO}:${SHA_TAG::7}"
